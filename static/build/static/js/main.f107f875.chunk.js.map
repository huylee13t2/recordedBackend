{"version":3,"sources":["containers/Recorder.jsx","App.js","serviceWorker.js","index.js"],"names":["Recorder","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","recorderRecording","console","log","recorderUploaded","playing","paused","onUploaded","e","onAttached","setState","showBg","onUploadProgress","onLoaded","onUploadSelected","onRerecord","onPlaying","onPaused","onEnded","onSeek","onError","onManuallySubmitted","onRecordingProgress","onAccessForbidden","onAccessGranted","onCameraUnresponsive","onVerified","videoToken","video","onNoCamera","onNoMicrophone","handleStart","child","record","isStart","state","_this2","react_default","a","createElement","className","style","padding","textAlign","build","apiKey","allowscreen","allowrecord","allowupload","onRecording","onUploading","recorderUploading","theme","themecolor","width","onRef","ref","ziggeo-video","skipinitial","React","Component","App","containers_Recorder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f107f875.chunk.js","sourcesContent":["import React from \"react\";\nimport { ZiggeoRecorder, ZiggeoPlayer } from 'react-ziggeo';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  Button,\n  Grid,\n  Paper,\n} from '@material-ui/core/';\n\nclass Recorder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // video: \"http://embed-cdn.ziggeo.com/v1/applications/ca222df12203cee18e55562941948d8a/videos/896922acb3a142f409f40f2db329ece1/video.mp4?force_refresh=1541583240701\",\n      videoToken: null,\n      isStart: false,\n      showBg: false,\n    };\n  }\n\n  recorderRecording = () => {\n    console.log('Recorder onRecording');\n\n  };\n\n  recorderUploaded = () => {\n    console.log('Recorder onUploaded');\n  };\n\n  playing = () => {\n    console.log('it\\'s playing, your action here');\n  };\n\n  paused = () => {\n    console.log('it\\'s paused, your action when pause');\n  };\n\n  onUploaded = e => {\n    console.log(\"onUploaded\")\n    console.log(e)\n    // this.setState({ videoToken: e.video })\n  }\n\n  onAttached = e => {\n    console.log(\"onAttached\")\n    console.log(e)\n    this.setState({ showBg: true });\n  }\n\n  onUploadProgress = () => {\n    console.log(\"onUploadProgress\")\n  }\n\n  onLoaded = e => {\n    console.log(\"onLoaded\")\n    console.log(e)\n  }\n\n  onUploadSelected = () => {\n    console.log(\"onUploadSelected\")\n  }\n\n  onRerecord = e => {\n    console.log(\"onRerecord\")\n    console.log(e)\n  }\n\n  onPlaying = e => {\n    console.log(\"onPlaying\")\n    console.log(e)\n  }\n\n  onPaused = () => {\n    console.log(\"onPaused\")\n  }\n\n  onEnded = e => {\n    console.log(\"onEnded\")\n    console.log(e)\n  }\n\n  onSeek = e => {\n    console.log(\"onSeek\")\n    console.log(e)\n  }\n\n  onError = e => {\n    console.log(\"onError\")\n    console.log(e)\n  }\n\n  onManuallySubmitted = () => {\n    console.log(\"onManuallySubmitted\")\n  }\n\n  onRecordingProgress = () => {\n    console.log(\"onRecordingProgress\")\n  }\n\n  onAccessForbidden = () => {\n    console.log(\"onAccessForbidden\")\n  }\n\n  onAccessGranted = () => {\n    console.log(\"onAccessGranted\")\n  }\n\n  onCameraUnresponsive = () => {\n    console.log(\"onCameraUnresponsive\")\n  }\n\n  onVerified = e => {\n    console.log(\"onVerified\")\n    console.log(e)\n    this.setState({ videoToken: e.video })\n  }\n\n  onNoCamera = () => {\n    console.log(\"onNoCamera\")\n  }\n\n  onNoMicrophone = () => {\n    console.log(\"onNoMicrophone\")\n  }\n\n  handleStart = () => {\n    // this.child.play();\n    this.child.record();\n    // this.child.upload();\n    // this.child.rerecord();\n    // this.child.stop();\n    // this.child.hidePopup();\n    // this.child.reset();\n\n    this.setState({ isStart: true });\n  }\n\n  render() {\n    console.log(this.state.videoToken)\n\n    const styles = theme => ({\n      root: {\n        flexGrow: 1,\n      },\n      paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n      },\n    });\n\n    const { showBg } = this.state;\n\n    return (\n      <div className={`container recorderVideo`} style={{ padding: '60px 0', textAlign: 'center' }}>\n        {/* <Button variant=\"contained\" color=\"primary\" onClick={ () => this.handleStart() } >Start Recorder</Button> */}\n\n        {\n          showBg && <div className=\"recorderBg\"></div>\n        }\n\n        {\n          !this.state.videoToken &&\n          <ZiggeoRecorder\n            apiKey={\"ca222df12203cee18e55562941948d8a\"}\n            allowscreen={false}\n            allowrecord={true}\n            allowupload={false} \n            onRecording={this.recorderRecording}\n            onUploading={this.recorderUploading}\n            onUploaded={e => this.onUploaded(e)}\n            onAttached={e => this.onAttached(e)}\n            onUploadProgress={this.onUploadProgress}\n            onLoaded={e => this.onLoaded(e)}\n            onUploadSelected={this.onUploadSelected}\n            onRerecord={this.onRerecord}\n            onPlaying={e => this.onPlaying(e)}\n            onPaused={this.onPaused}\n            onEnded={e => this.onEnded(e)}\n            onSeek={e => this.onSeek(e)}\n            onError={e => this.onError(e)}\n            onManuallySubmitted={this.onManuallySubmitted}\n            onRecordingProgress={this.onRecordingProgress}\n            onAccessForbidden={this.onAccessForbidden}\n            onAccessGranted={this.onAccessGranted}\n            onCameraUnresponsive={this.onCameraUnresponsive}\n            onVerified={e => this.onVerified(e)}\n            onNoCamera={this.onNoCamera}\n            onNoMicrophone={this.onNoMicrophone}\n            theme={'modern'}\n            themecolor={'green'}\n            style={{ width: \"100%\" }}\n            onRef={ref => (this.child = ref)}\n          />\n        }\n\n        {\n          this.state.videoToken &&\n          <div>\n            {/* <span>{this.state.videoToken}</span> */}\n            <ZiggeoPlayer\n              apiKey={\"0d668f2e730cac445575fe7cb0eba36e\"}\n              ziggeo-video={this.state.videoToken}\n              video={this.state.videoToken}\n              theme={'modern'}\n              themecolor={'green'}\n              skipinitial={false}\n              onPlaying={e => this.onPlaying(e)}\n              onPaused={e => this.onPaused(e)}\n              onAttached={e => this.onAttached(e)}\n              onLoaded={e => this.onLoaded(e)}\n              onEnded={e => this.onEnded(e)}\n              onError={e => this.onError(e)}\n              onSeek={e => this.onSeek(e)}\n            // onRef={ref => (this.child = ref)}\n            />\n          </div>\n        }\n\n\n      </div>\n    )\n  }\n}\n\nexport default Recorder;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {\n  Recorder,\n} from './containers'\n\nclass App extends Component {\n  \n\n  render() {\n    return (\n      <Recorder />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}